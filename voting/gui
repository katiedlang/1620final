import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QRadioButton, QPushButton, QVBoxLayout, QWidget


class VotingApp(QMainWindow):
   def __init__(self):
       super().__init__()


       # Create widgets
       self.central_widget = QWidget()
       self.setCentralWidget(self.central_widget)


       # Voting Application Interface
       self.label_id = QLabel("Voter ID:")
       self.radio_jane = QRadioButton("Jane")
       self.radio_john = QRadioButton("John")
       self.btn_submit = QPushButton("Submit Vote")


       # Layout for Voting Application Interface
       layout_voting = QVBoxLayout()
       layout_voting.addWidget(self.label_id)
       layout_voting.addWidget(self.radio_jane)
       layout_voting.addWidget(self.radio_john)
       layout_voting.addWidget(self.btn_submit)


       # Features/Requirements Section
       features_label = QLabel("VOTING APP\n\n"
                              "• Must receive a unique identifier to help determine duplicate votes.\n"
                              "• Have data validation for the identifier.\n"
                              "• Store who has voted who in a file.\n"
                              "• Different colors for informational messages.")
       features_label.setStyleSheet("color: #333; font-size: 12px;")


       # Main layout
       main_layout = QVBoxLayout()
       main_layout.addLayout(layout_voting)
       main_layout.addWidget(features_label)
       self.central_widget.setLayout(main_layout)


       # Connect signals
       self.btn_submit.clicked.connect(self.handle_vote_submission)


   def handle_vote_submission(self):
       voter_id = "123"  # Replace with actual voter ID (validate it)
       candidate = "Jane" if self.radio_jane.isChecked() else "John"


       try:
           # Validate voter ID (example: must be numeric)
           if not voter_id.isdigit():
               raise ValueError("Invalid voter ID. Please enter a numeric value.")


           # Check if voter has already voted (you'll need to implement this logic)
           if self.has_already_voted(voter_id):
               raise Exception("You have already voted. Duplicate votes are not allowed.")


           # Handle the vote (store it, update UI, etc.)
           self.process_vote(voter_id, candidate)
           print(f"Voter {voter_id} voted for {candidate}")
       except Exception as e:
           print(f"Error: {e}")


   def has_already_voted(self, voter_id):
       # Implement your logic to check if the voter has already voted
       # Return True if already voted, False otherwise
       return False


   def process_vote(self, voter_id, candidate):
       # Implement your logic to handle the vote (e.g., store it, update UI, etc.)
       pass
